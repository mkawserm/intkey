// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package intkey

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// IntKeyRPCClient is the client API for IntKeyRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntKeyRPCClient interface {
	Insert(ctx context.Context, in *IntKey, opts ...grpc.CallOption) (*IntKey, error)
	Delete(ctx context.Context, in *IntKey, opts ...grpc.CallOption) (*IntKey, error)
	Increment(ctx context.Context, in *IntKey, opts ...grpc.CallOption) (*IntKey, error)
	Decrement(ctx context.Context, in *IntKey, opts ...grpc.CallOption) (*IntKey, error)
}

type intKeyRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewIntKeyRPCClient(cc grpc.ClientConnInterface) IntKeyRPCClient {
	return &intKeyRPCClient{cc}
}

func (c *intKeyRPCClient) Insert(ctx context.Context, in *IntKey, opts ...grpc.CallOption) (*IntKey, error) {
	out := new(IntKey)
	err := c.cc.Invoke(ctx, "/intkey.IntKeyRPC/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intKeyRPCClient) Delete(ctx context.Context, in *IntKey, opts ...grpc.CallOption) (*IntKey, error) {
	out := new(IntKey)
	err := c.cc.Invoke(ctx, "/intkey.IntKeyRPC/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intKeyRPCClient) Increment(ctx context.Context, in *IntKey, opts ...grpc.CallOption) (*IntKey, error) {
	out := new(IntKey)
	err := c.cc.Invoke(ctx, "/intkey.IntKeyRPC/Increment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intKeyRPCClient) Decrement(ctx context.Context, in *IntKey, opts ...grpc.CallOption) (*IntKey, error) {
	out := new(IntKey)
	err := c.cc.Invoke(ctx, "/intkey.IntKeyRPC/Decrement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntKeyRPCServer is the server API for IntKeyRPC service.
// All implementations must embed UnimplementedIntKeyRPCServer
// for forward compatibility
type IntKeyRPCServer interface {
	Insert(context.Context, *IntKey) (*IntKey, error)
	Delete(context.Context, *IntKey) (*IntKey, error)
	Increment(context.Context, *IntKey) (*IntKey, error)
	Decrement(context.Context, *IntKey) (*IntKey, error)
	mustEmbedUnimplementedIntKeyRPCServer()
}

// UnimplementedIntKeyRPCServer must be embedded to have forward compatible implementations.
type UnimplementedIntKeyRPCServer struct {
}

func (UnimplementedIntKeyRPCServer) Insert(context.Context, *IntKey) (*IntKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedIntKeyRPCServer) Delete(context.Context, *IntKey) (*IntKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedIntKeyRPCServer) Increment(context.Context, *IntKey) (*IntKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Increment not implemented")
}
func (UnimplementedIntKeyRPCServer) Decrement(context.Context, *IntKey) (*IntKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decrement not implemented")
}
func (UnimplementedIntKeyRPCServer) mustEmbedUnimplementedIntKeyRPCServer() {}

// UnsafeIntKeyRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntKeyRPCServer will
// result in compilation errors.
type UnsafeIntKeyRPCServer interface {
	mustEmbedUnimplementedIntKeyRPCServer()
}

func RegisterIntKeyRPCServer(s grpc.ServiceRegistrar, srv IntKeyRPCServer) {
	s.RegisterService(&_IntKeyRPC_serviceDesc, srv)
}

func _IntKeyRPC_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntKeyRPCServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intkey.IntKeyRPC/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntKeyRPCServer).Insert(ctx, req.(*IntKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntKeyRPC_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntKeyRPCServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intkey.IntKeyRPC/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntKeyRPCServer).Delete(ctx, req.(*IntKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntKeyRPC_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntKeyRPCServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intkey.IntKeyRPC/Increment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntKeyRPCServer).Increment(ctx, req.(*IntKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntKeyRPC_Decrement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntKeyRPCServer).Decrement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intkey.IntKeyRPC/Decrement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntKeyRPCServer).Decrement(ctx, req.(*IntKey))
	}
	return interceptor(ctx, in, info, handler)
}

var _IntKeyRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "intkey.IntKeyRPC",
	HandlerType: (*IntKeyRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _IntKeyRPC_Insert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _IntKeyRPC_Delete_Handler,
		},
		{
			MethodName: "Increment",
			Handler:    _IntKeyRPC_Increment_Handler,
		},
		{
			MethodName: "Decrement",
			Handler:    _IntKeyRPC_Decrement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "intkey/intkey.proto",
}
